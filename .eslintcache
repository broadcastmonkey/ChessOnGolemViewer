[{"D:\\js\\chess_on_golem\\chess-front\\src\\index.js":"1","D:\\js\\chess_on_golem\\chess-front\\src\\App.js":"2","D:\\js\\chess_on_golem\\chess-front\\src\\serviceWorker.js":"3","D:\\js\\chess_on_golem\\chess-front\\src\\components\\notFound.jsx":"4","D:\\js\\chess_on_golem\\chess-front\\src\\components\\navBar.jsx":"5","D:\\js\\chess_on_golem\\chess-front\\src\\components\\chessDashboard.jsx":"6","D:\\js\\chess_on_golem\\chess-front\\src\\services\\httpService.js":"7","D:\\js\\chess_on_golem\\chess-front\\src\\services\\socketService.js":"8","D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\socketsio\\signalStrengthIcon.jsx":"9","D:\\js\\chess_on_golem\\chess-front\\src\\services\\logService.js":"10","D:\\js\\chess_on_golem\\chess-front\\src\\services\\mockMovesService.js":"11","D:\\js\\chess_on_golem\\chess-front\\src\\components\\movesTable.jsx":"12","D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\table\\tableHeader.jsx":"13","D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\table\\tableBody.jsx":"14","D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\table\\genericTable.jsx":"15"},{"size":590,"mtime":1609682327825,"results":"16","hashOfConfig":"17"},{"size":1144,"mtime":1609682995637,"results":"18","hashOfConfig":"17"},{"size":5086,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":111,"mtime":1586943369812,"results":"20","hashOfConfig":"17"},{"size":3429,"mtime":1609855097253,"results":"21","hashOfConfig":"17"},{"size":12011,"mtime":1609863012634,"results":"22","hashOfConfig":"17"},{"size":792,"mtime":1587473949375,"results":"23","hashOfConfig":"17"},{"size":187,"mtime":1609673403486,"results":"24","hashOfConfig":"17"},{"size":899,"mtime":1587494510141,"results":"25","hashOfConfig":"17"},{"size":408,"mtime":1586944055705,"results":"26","hashOfConfig":"17"},{"size":570,"mtime":1609812846169,"results":"27","hashOfConfig":"17"},{"size":1171,"mtime":1609854681796,"results":"28","hashOfConfig":"17"},{"size":1307,"mtime":1609859067372,"results":"29","hashOfConfig":"17"},{"size":745,"mtime":1609854606819,"results":"30","hashOfConfig":"17"},{"size":446,"mtime":1609790984090,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1jz3sgu",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\js\\chess_on_golem\\chess-front\\src\\index.js",[],["66","67"],"D:\\js\\chess_on_golem\\chess-front\\src\\App.js",[],"D:\\js\\chess_on_golem\\chess-front\\src\\serviceWorker.js",[],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\notFound.jsx",[],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\navBar.jsx",[],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\chessDashboard.jsx",["68","69"],"import React, { Component } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport socket from \"./../services/socketService\";\r\nimport { toast } from \"react-toastify\";\r\n/*import { getMockMoves } from \"../services/mockMovesService\";*/\r\nimport MovesTable from \"./movesTable\";\r\nimport \"./chessDashboard.css\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nclass ChessDashboard extends Component {\r\n  state = {\r\n    fen: \"start\",\r\n    statusBar: \"\",\r\n    turn: \"white\",\r\n    statusColor: \"info\",\r\n    moveNumber: 1,\r\n    depth: 1,\r\n    status: \"...\",\r\n    statusStats: \"...\",\r\n    taskId: \"\",\r\n    gameId: \"\",\r\n    intervalEnabled: false,\r\n    secondsComputing: 0,\r\n    intervalId: 0,\r\n    moves: [] /*getMockMoves(22),*/,\r\n\r\n    white_stats: {\r\n      total_moves: 0,\r\n      avg_depth: 0,\r\n      total_vm_time: 0,\r\n      avg_vm_time: 0,\r\n      avg_golem_time: 0,\r\n      best_golem_time: 0,\r\n      total_time: 0,\r\n      total_cost: 0,\r\n    },\r\n    black_stats: {\r\n      total_moves: 0,\r\n      avg_depth: 0,\r\n      total_vm_time: 0,\r\n      total_time: 0,\r\n      total_cost: 0,\r\n      avg_vm_time: 0,\r\n      avg_golem_time: 0,\r\n      best_golem_time: 0,\r\n    },\r\n  };\r\n  PlayerEnum = Object.freeze({\r\n    white: 1,\r\n    black: 2,\r\n  });\r\n  StatusEnum = Object.freeze({\r\n    none: 1,\r\n    searching: 2,\r\n    provider_confirmed: 3,\r\n    finished: 4,\r\n    game_end: 5,\r\n    wednesday: 6,\r\n  });\r\n  status = this.StatusEnum.none;\r\n\r\n  confirmedWorkers = 0;\r\n  resetTimer = () => {\r\n    this.setState({ secondsComputing: 0 });\r\n  };\r\n\r\n  startTimer = () => {\r\n    if (this.intervalId !== 0) {\r\n      this.stopTimer();\r\n    }\r\n    var intervalId = setInterval(this.timer, 1000);\r\n    this.setState({\r\n      intervalId,\r\n      intervalEnabled: true,\r\n    });\r\n  };\r\n\r\n  stopTimer = () => {\r\n    if (this.state.intervalId) clearInterval(this.state.intervalId);\r\n    this.setState({ intervalEnabled: false });\r\n  };\r\n\r\n  timer = () => {\r\n    let { secondsComputing, intervalEnabled } = this.state;\r\n\r\n    if (!intervalEnabled) return this.stopTimer();\r\n    secondsComputing++;\r\n    this.setState({\r\n      secondsComputing,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    socket.on(\"currentTurnEvent\", this.handleCurrentTurnEvent);\r\n    socket.on(\"gameFinished\", this.handleGameFinished);\r\n    socket.on(\"positionEvent\", this.handlePositionEvent);\r\n    socket.on(\"moveEvent\", this.handleMoveEvent);\r\n    socket.on(\"providerFailed\", this.handleProviderFailed);\r\n    socket.on(\"agreementCreated\", this.handleAgreementCreated);\r\n    socket.on(\"agreementConfirmed\", this.handleAgreementConfirmed);\r\n    socket.on(\"computationStarted\", this.handleComputationStarted);\r\n    socket.on(\"computationFinished\", this.handleComputationFinished);\r\n    socket.on(\"offersReceived\", this.handleOffersReceived);\r\n    socket.on(\"movesRefreshed\", this.handleMovesRefreshed);\r\n  }\r\n  handleGameFinished = (params) => {\r\n    const { winner, type } = params;\r\n    this.status = this.StatusEnum.game_end;\r\n    this.setState({\r\n      status: \"Game Finished!\",\r\n      statusStats: type === \"draw\" ? \"DRAW\" : winner + \" PLAYER WINS\",\r\n    });\r\n  };\r\n\r\n  defaultStatsObject = () => {\r\n    return {\r\n      total_moves: 0,\r\n      avg_depth: 0,\r\n      total_vm_time: 0,\r\n      total_time: 0,\r\n      total_cost: 0,\r\n      avg_vm_time: 0,\r\n      avg_golem_time: 0,\r\n      best_golem_time: 0,\r\n    };\r\n  };\r\n\r\n  getStats = (moves, turn) => {\r\n    if (\r\n      moves.length === 0 ||\r\n      moves.filter((x) => x.turn === turn && x.move !== undefined).length === 0\r\n    ) {\r\n      return this.defaultStatsObject();\r\n    }\r\n\r\n    let stats = {};\r\n    stats.total_moves = moves.filter(\r\n      (x) => x.turn === turn && x.move !== undefined\r\n    ).length;\r\n    stats.avg_depth =\r\n      moves\r\n        .filter((x) => x.turn === turn && x.move !== undefined)\r\n        .map((x) => x.depth)\r\n        .reduce((a, c) => a + c) / stats.total_moves;\r\n    stats.total_vm_time = moves\r\n      .filter((x) => x.turn === turn && x.move !== undefined)\r\n      .map((x) => parseFloat(x.vm_time) / 1000)\r\n      .reduce((a, c) => a + c)\r\n      .toFixed(3);\r\n    stats.total_time = moves\r\n      .filter((x) => x.turn === turn && x.move !== undefined)\r\n      .map((x) =>\r\n        x.total_time === undefined ? 0.0 : parseFloat(x.total_time) / 1000\r\n      )\r\n      .reduce((a, c) => a + c)\r\n      .toFixed(3);\r\n\r\n    stats.avg_vm_time = (stats.total_vm_time / stats.total_moves).toFixed(3);\r\n    stats.avg_golem_time = (stats.total_time / stats.total_moves).toFixed(3);\r\n    stats.best_golem_time = Math.min(\r\n      ...moves\r\n        .filter((x) => x.turn === turn && x.move !== undefined)\r\n        .map((x) =>\r\n          x.total_time === undefined ? 9999.0 : parseFloat(x.total_time) / 1000\r\n        )\r\n    ).toFixed(3);\r\n    if (stats.best_golem_time == 9999.0) stats.best_golem_time = \"-\";\r\n\r\n    stats.total_cost = moves\r\n      .filter((x) => x.turn === turn && x.move !== undefined)\r\n      .map((x) => (x.cost === undefined ? 0.0 : parseFloat(x.cost)))\r\n      .reduce((a, c) => a + c);\r\n    return stats;\r\n  };\r\n\r\n  handleMovesRefreshed = (incoming) => {\r\n    let moves = [];\r\n    for (const [key, value] of Object.entries(incoming)) {\r\n      moves.push(value);\r\n    }\r\n\r\n    console.log(\"moves\");\r\n    console.log(moves);\r\n\r\n    this.setState({\r\n      moves,\r\n      black_stats: this.getStats(moves, \"black\"),\r\n      white_stats: this.getStats(moves, \"white\"),\r\n    });\r\n  };\r\n\r\n  handleOffersReceived = (params) => {\r\n    const { offersCount, taskId } = params;\r\n    if (this.state.taskId !== taskId) return;\r\n    if (this.status === this.StatusEnum.searching) {\r\n      this.setState({\r\n        statusStats: `${offersCount} proposals received...`,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleCurrentTurnEvent = (params) => {\r\n    const { taskId, gameStep: moveNumber, turnId, depth } = params;\r\n    this.setState({\r\n      taskId,\r\n      moveNumber,\r\n      turn: turnId === \"w\" ? \"white\" : \"black\",\r\n      depth,\r\n    });\r\n    console.log(\"current turn event\");\r\n    console.log(params);\r\n    this.resetTimer();\r\n    this.startTimer();\r\n  };\r\n  handleComputationStarted = (params) => {\r\n    console.log(\"started started started\");\r\n    const { taskId } = params;\r\n    if (this.state.taskId !== taskId) return;\r\n    this.status = this.StatusEnum.searching;\r\n    this.setState({\r\n      status: \"searching for best offer...\",\r\n      statusStats: \"offer is in the market...\",\r\n    });\r\n  };\r\n  handleComputationFinished = (params) => {\r\n    console.log(\"computation finished !! \");\r\n    console.log(params);\r\n    const { taskId, time } = params;\r\n    //if (this.state.taskId !== taskId) return;\r\n    let timeInSec = Math.round(time / 1000);\r\n    toast.info(\r\n      `computation with task_id: ${taskId} \\nfinished in : ${time} + ms  \\n(~ ${timeInSec}s )`\r\n    );\r\n  };\r\n  handleAgreementConfirmed = (params) => {\r\n    const { taskId, providerName } = params;\r\n    this.confirmedWorkers++;\r\n    console.log(\"confirmed workers: \" + this.confirmedWorkers);\r\n    if (this.state.taskId !== taskId) return;\r\n    this.status = this.StatusEnum.provider_confirmed;\r\n    console.log(\"agreement confirmed...\");\r\n    console.log(params);\r\n    this.setState({\r\n      status: \"provider: \" + providerName,\r\n      statusStats: \"computing best move on provider's VM\",\r\n    });\r\n  };\r\n  handleAgreementCreated = (params) => {\r\n    const { taskId, providerName } = params;\r\n    if (this.state.taskId !== taskId) return;\r\n    console.log(\"agreement created...\");\r\n    console.log(params);\r\n    this.setState({\r\n      statusStats: \"agreement created with provider: \" + providerName,\r\n    });\r\n  };\r\n  handlePositionEvent = (params) => {\r\n    console.log(\"position event...\");\r\n    console.log(params);\r\n    const { fen } = params;\r\n    console.log(\"chess pos\", fen);\r\n    this.setState({ fen });\r\n  };\r\n  handleMoveEvent = (bestmove) => {\r\n    const { move, depth, time } = bestmove;\r\n    console.log(\"move event...\");\r\n    console.log(move);\r\n    if (move !== \"test\")\r\n      toast.info(\"move : \" + move + \"\\ndepth : \" + depth + \"\\ntime: \" + time);\r\n  };\r\n  handleProviderFailed = (provider) => {\r\n    const { taskId, providerName } = provider;\r\n    if (this.state.taskId !== taskId) return;\r\n    console.log(\"provider failed...\");\r\n    console.log(provider);\r\n    if (provider !== \"test\") toast.error(\"provider failed : \" + providerName);\r\n  };\r\n\r\n  renderTable = () => {\r\n    let moves = this.state.moves;\r\n\r\n    return <MovesTable users={moves} />;\r\n  };\r\n  renderChessBoard = () => {\r\n    return (\r\n      <Chessboard\r\n        width={512}\r\n        id=\"random\"\r\n        position={this.state.fen}\r\n        transitionDuration={300}\r\n        boardStyle={{\r\n          borderRadius: \"5px\",\r\n          boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  getTextColor() {\r\n    let variant = this.state.statusColor;\r\n    if (variant === \"light\" || variant === \"warning\") return \"dark\";\r\n    return \"light\";\r\n  }\r\n  renderHeader = () => {\r\n    let variant = this.state.statusColor;\r\n    return (\r\n      <Card\r\n        bg={variant.toLowerCase()}\r\n        text={this.getTextColor()}\r\n        style={{ width: \"512\" }}\r\n        className=\"mb-2 mt-2\"\r\n      >\r\n        <Card.Header>\r\n          <b>Turn: {this.state.turn.toUpperCase()}</b>\r\n          <b className=\"ml-5\">Move number: {this.state.moveNumber}</b>\r\n          <b className=\"ml-5\">Algorithm Depth: {this.state.depth}</b>\r\n\r\n          <b className=\"ml-5\"> {this.state.secondsComputing}s</b>\r\n          <b className=\"ml-5\"> task id: {this.state.taskId}</b>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>\r\n            <h3>{this.state.status} </h3>\r\n          </Card.Title>\r\n          <Card.Text>\r\n            <h3>{this.state.statusStats}</h3>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  renderPlayerCard(player) {\r\n    const stats =\r\n      player === this.PlayerEnum.white\r\n        ? this.state.white_stats\r\n        : this.state.black_stats;\r\n\r\n    return (\r\n      <Card\r\n        bg={player === this.PlayerEnum.white ? \"light\" : \"dark\"}\r\n        text={player === this.PlayerEnum.white ? \"dark\" : \"light\"}\r\n        style={{ width: \"512\" }}\r\n        className=\"mb-2 mt-2\"\r\n      >\r\n        <Card.Header>\r\n          <center>\r\n            <b>{player === this.PlayerEnum.white ? \"WHITE\" : \"BLACK\"}</b>{\" \"}\r\n          </center>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>Statistics: </Card.Title>\r\n          <Card.Text>\r\n            <i>total moves:</i> <b>{stats.total_moves}</b>\r\n            <br />\r\n            <i>avg depth:</i> <b>{stats.avg_depth}</b>\r\n            <br />\r\n            <i>total vm time:</i> <b>{stats.total_vm_time}s</b>\r\n            <br />\r\n            <i>avg vm time:</i> <b>{stats.avg_vm_time}s</b>\r\n            <br />\r\n            <i>total golem time:</i> <b>{stats.total_time}s</b>\r\n            <br />\r\n            <i>avg golem time:</i> <b>{stats.avg_golem_time}s</b>\r\n            <br />\r\n            <i>best golem time:</i> <b>{stats.best_golem_time}s</b>\r\n            <br />\r\n            <i>total golem cost:</i> <b>{stats.total_cost}</b>\r\n            <br />\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  renderPlayerCards = () => {\r\n    return (\r\n      <div>\r\n        <div className=\"card-left\">\r\n          {this.renderPlayerCard(this.PlayerEnum.white)}\r\n        </div>\r\n        <div className=\"card-right\">\r\n          {\" \"}\r\n          {this.renderPlayerCard(this.PlayerEnum.black)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>{this.renderHeader()}</div>\r\n        <div className=\"chess-wrapper\">\r\n          <div className=\"chess-board\">\r\n            <div>{this.renderChessBoard()}</div>\r\n            <div>{this.renderPlayerCards()}</div>\r\n          </div>\r\n          <div className=\"chess-table\">\r\n            <div>{this.renderTable()}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChessDashboard;\r\n","D:\\js\\chess_on_golem\\chess-front\\src\\services\\httpService.js",["70"],"D:\\js\\chess_on_golem\\chess-front\\src\\services\\socketService.js",[],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\socketsio\\signalStrengthIcon.jsx",[],"D:\\js\\chess_on_golem\\chess-front\\src\\services\\logService.js",["71"],"D:\\js\\chess_on_golem\\chess-front\\src\\services\\mockMovesService.js",[],["72","73"],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\movesTable.jsx",[],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\table\\tableHeader.jsx",[],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\table\\tableBody.jsx",[],["74","75"],"D:\\js\\chess_on_golem\\chess-front\\src\\components\\common\\table\\genericTable.jsx",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":167,"column":31,"nodeType":"82","messageId":"83","endLine":167,"endColumn":33},{"ruleId":"84","severity":1,"message":"85","line":178,"column":17,"nodeType":"86","messageId":"87","endLine":178,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":25,"column":1,"nodeType":"90","endLine":31,"endColumn":3},{"ruleId":"88","severity":1,"message":"89","line":18,"column":1,"nodeType":"90","endLine":18,"endColumn":37},{"ruleId":"76","replacedBy":"91"},{"ruleId":"78","replacedBy":"92"},{"ruleId":"76","replacedBy":"93"},{"ruleId":"78","replacedBy":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["95"],["96"],["95"],["96"],"no-global-assign","no-unsafe-negation"]